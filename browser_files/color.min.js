(function() {
  if(typeof window.color_convert == "undefined") {
    throw"color-convert required";
  }
  if(typeof window.color_string == "undefined") {
    throw"color-string required";
  }
  var h = {init:function(a) {
    $.extend(this, h);
    this.values = {rgb:[0, 0, 0], hsl:[0, 0, 0], hsv:[0, 0, 0], cmyk:[0, 0, 0, 0], alpha:1};
    if(typeof a == "string") {
      var b = color_string.getRgba(a);
      b ? this.setValues("rgb", b) : (b = color_string.getHsla(a)) && this.setValues("hsl", b)
    }else {
      typeof a == "object" && (b = a, b.r !== void 0 || b.red !== void 0 ? this.setValues("rgb", b) : b.l !== void 0 || b.lightness !== void 0 ? this.setValues("hsl", b) : b.v !== void 0 || b.value !== void 0 ? this.setValues("hsv", b) : (b.c !== void 0 || b.cyan !== void 0) && this.setValues("cmyk", b))
    }
  }, rgb:function(a) {
    return this.setSpace("rgb", arguments)
  }, hsl:function(a) {
    return this.setSpace("hsl", arguments)
  }, hsv:function(a) {
    return this.setSpace("hsv", arguments)
  }, cmyk:function(a) {
    return this.setSpace("cmyk", arguments)
  }, rgbArray:function() {
    return this.values.rgb
  }, hslArray:function() {
    return this.values.hsl
  }, hsvArray:function() {
    return this.values.hsv
  }, cmykArray:function() {
    return this.values.cmyk
  }, rgbaArray:function() {
    var a = this.values.rgb;
    a.push(this.values.alpha);
    return a
  }, hslaArray:function() {
    var a = this.values.hsl;
    a.push(this.values.alpha);
    return a
  }, alpha:function(a) {
    if(a === void 0) {
      return this.values.alpha
    }
    this.setValues("alpha", a);
    return this
  }, red:function(a) {
    return this.setChannel("rgb", 0, a)
  }, green:function(a) {
    return this.setChannel("rgb", 1, a)
  }, blue:function(a) {
    return this.setChannel("rgb", 2, a)
  }, hue:function(a) {
    return this.setChannel("hsl", 0, a)
  }, saturation:function(a) {
    return this.setChannel("hsl", 1, a)
  }, lightness:function(a) {
    return this.setChannel("hsl", 2, a)
  }, saturationv:function(a) {
    return this.setChannel("hsv", 1, a)
  }, value:function(a) {
    return this.setChannel("hsv", 2, a)
  }, cyan:function(a) {
    return this.setChannel("cmyk", 0, a)
  }, magenta:function(a) {
    return this.setChannel("cmyk", 1, a)
  }, yellow:function(a) {
    return this.setChannel("cmyk", 2, a)
  }, black:function(a) {
    return this.setChannel("cmyk", 3, a)
  }, hexString:function() {
    return color_string.hexString(this.values.rgb)
  }, rgbString:function() {
    return color_string.rgbString(this.values.rgb, this.values.alpha)
  }, rgbaString:function() {
    return color_string.rgbaString(this.values.rgb, this.values.alpha)
  }, percentString:function() {
    return color_string.percentString(this.values.rgb, this.values.alpha)
  }, hslString:function() {
    return color_string.hslString(this.values.hsl, this.values.alpha)
  }, hslaString:function() {
    return color_string.hslaString(this.values.hsl, this.values.alpha)
  }, keyword:function() {
    return color_string.keyword(this.values.rgb, this.values.alpha)
  }, luminosity:function() {
    for(var a = this.values.rgb, b = 0;b < a.length;b++) {
      var c = a[b] / 255;
      a[b] = c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4)
    }
    return 0.2126 * a[0] + 0.7152 * a[1] + 0.0722 * a[2]
  }, contrast:function(a) {
    var b = this.luminosity(), a = a.luminosity();
    return b > a ? (b + 0.05) / (a + 0.05) : (a + 0.05) / (b + 0.05)
  }, dark:function() {
    var a = this.values.rgb;
    return(a[0] * 299 + a[1] * 587 + a[2] * 114) / 1E3 < 128
  }, light:function() {
    return!this.dark()
  }, negate:function() {
    for(var a = [], b = 0;b < 3;b++) {
      a[b] = 255 - this.values.rgb[b]
    }
    this.setValues("rgb", a);
    return this
  }, lighten:function(a) {
    this.values.hsl[2] += this.values.hsl[2] * a;
    this.setValues("hsl", this.values.hsl);
    return this
  }, darken:function(a) {
    this.values.hsl[2] -= this.values.hsl[2] * a;
    this.setValues("hsl", this.values.hsl);
    return this
  }, saturate:function(a) {
    this.values.hsl[1] += this.values.hsl[1] * a;
    this.setValues("hsl", this.values.hsl);
    return this
  }, desaturate:function(a) {
    this.values.hsl[1] -= this.values.hsl[1] * a;
    this.setValues("hsl", this.values.hsl);
    return this
  }, greyscale:function() {
    var a = this.values.rgb, a = a[0] * 0.3 + a[1] * 0.59 + a[2] * 0.11;
    this.setValues("rgb", [a, a, a]);
    return this
  }, clearer:function(a) {
    this.setValues("alpha", this.values.alpha - this.values.alpha * a);
    return this
  }, opaquer:function(a) {
    this.setValues("alpha", this.values.alpha + this.values.alpha * a);
    return this
  }, rotate:function(a) {
    var b = this.values.hsl[0], b = (b + a) % 360;
    this.values.hsl[0] = b < 0 ? 360 + b : b;
    this.setValues("hsl", this.values.hsl);
    return this
  }, mix:function(a, b) {
    for(var b = 1 - (b || 0.5), c = b * 2 - 1, f = this.alpha() - a.alpha(), c = ((c * f == -1 ? c : (c + f) / (1 + c * f)) + 1) / 2, f = 1 - c, d = this.rgbArray(), g = a.rgbArray(), e = 0;e < d.length;e++) {
      d[e] = d[e] * c + g[e] * f
    }
    this.setValues("rgb", d);
    this.setValues("alpha", this.alpha() * b + a.alpha() * (1 - b));
    return this
  }, toJSON:function() {
    return this.rgb()
  }, getValues:function(a) {
    for(var b = {}, c = 0;c < a.length;c++) {
      b[a[c]] = this.values[a][c]
    }
    if(this.values.alpha != 1) {
      b.a = this.values.alpha
    }
    return b
  }, setValues:function(a, b) {
    var c = {rgb:["red", "green", "blue"], hsl:["hue", "saturation", "lightness"], hsv:["hue", "saturation", "value"], cmyk:["cyan", "magenta", "yellow", "black"]}, f = {rgb:[255, 255, 255], hsl:[360, 100, 100], hsv:[360, 100, 100], cmyk:[100, 100, 100, 100]}, d = 1;
    if(a == "alpha") {
      d = b
    }else {
      if(b.length) {
        this.values[a] = b.slice(0, a.length), d = b[a.length]
      }else {
        if(b[a[0]] !== void 0) {
          for(d = 0;d < a.length;d++) {
            this.values[a][d] = b[a[d]]
          }
          d = b.a
        }else {
          if(b[c[a][0]] !== void 0) {
            for(var g = c[a], d = 0;d < a.length;d++) {
              this.values[a][d] = b[g[d]]
            }
            d = b.alpha
          }
        }
      }
    }
    this.values.alpha = Math.max(0, Math.min(1, d || this.values.alpha));
    if(a != "alpha") {
      for(var e in c) {
        e != a && (this.values[e] = color_convert[a][e](this.values[a]));
        for(d = 0;d < e.length;d++) {
          g = Math.max(0, Math.min(f[e][d], this.values[e][d])), this.values[e][d] = Math.round(g)
        }
      }
      return true
    }
  }, setSpace:function(a, b) {
    var c = b[0];
    if(c === void 0) {
      return this.getValues(a)
    }
    typeof c == "number" && (c = Array.prototype.slice.call(b));
    this.setValues(a, c);
    return this
  }, setChannel:function(a, b, c) {
    if(c === void 0) {
      return this.values[a][b]
    }
    this.values[a][b] = c;
    this.setValues(a, this.values[a]);
    return this
  }};
  window.Color = function(a) {
    return new h.init(a)
  }
})();

